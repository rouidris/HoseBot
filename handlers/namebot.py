import os
import pandas as pd
from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.menu import main_menu

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel-—Ñ–∞–π–ª–∞
class Proc1States(StatesGroup):
    waiting_excel = State()

async def start_proc1(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xls –∏–ª–∏ .xlsx) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    await Proc1States.waiting_excel.set()

async def process_excel(message: types.Message, state: FSMContext):
    if not message.document or not message.document.file_name.lower().endswith(('.xls', '.xlsx')):
        await message.answer("–≠—Ç–æ –Ω–µ Excel-—Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ .xls –∏–ª–∏ .xlsx.")
        return
    file = await message.document.get_file()
    xlsx_path = f'tmp1_{message.from_user.id}.xlsx'
    await file.download(destination_file=xlsx_path)

    # –ß–∏—Ç–∞–µ–º excel
    df = pd.read_excel(xlsx_path, sheet_name="–õ–∏—Å—Ç –ø–æ–¥–±–æ—Ä–∞", header=3)
    df.columns = ["–§–æ—Ç–æ", "–ë—Ä–µ–Ω–¥", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞", "–¶–≤–µ—Ç", "–°—Ç–∏–∫–µ—Ä", "–ë–∞—Ä–∫–æ–¥"]
    df = df[df["–ë—Ä–µ–Ω–¥"] != "–ë—Ä–µ–Ω–¥"].dropna(subset=["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"])
    df["–ë—Ä–µ–Ω–¥"] = df["–ë—Ä–µ–Ω–¥"].fillna("")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º
    grouped = df.groupby(["–ë—Ä–µ–Ω–¥", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]).size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    grouped = grouped.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total = grouped["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum()
    for _, row in grouped.iterrows():
        brand = row["–ë—Ä–µ–Ω–¥"]
        name = row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
        count = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        await message.answer(f"{brand} ‚Äî {name}: {count} —à—Ç—É–∫")

    await message.answer(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total} —à—Ç.", reply_markup=main_menu)

    # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()
    if os.path.exists(xlsx_path): os.remove(xlsx_path)


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_proc1, Text(equals="üîß –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ 1"))
    dp.register_message_handler(process_excel, content_types=['document'], state=Proc1States.waiting_excel)