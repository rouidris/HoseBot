import os
import pandas as pd
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.lib.pagesizes import mm
from reportlab.pdfgen import canvas
from barcode.ean import EuropeanArticleNumber13
from barcode.writer import ImageWriter
from PyPDF2 import PdfMerger, PdfReader

from aiogram import types
from aiogram.types import InputFile
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.menu import main_menu

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
arial_font_path = 'arial.ttf'
pdfmetrics.registerFont(TTFont('Arial', arial_font_path))

class QRBotStates(StatesGroup):
    waiting_excel = State()
    waiting_pdf = State()

async def start_qrbot(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xls –∏–ª–∏ .xlsx) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:')
    await QRBotStates.waiting_excel.set()

async def process_excel(message: types.Message, state: FSMContext):
    if not message.document or not message.document.file_name.lower().endswith(('.xls', '.xlsx')):
        await message.answer('–≠—Ç–æ –Ω–µ Excel-—Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xls –∏–ª–∏ .xlsx.')
        return
    file = await message.document.get_file()
    excel_path = f'tmp_{message.from_user.id}.xlsx'
    await file.download(destination_file=excel_path)
    await state.update_data(excel_path=excel_path)
    await message.answer('Excel-—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª (.pdf):')
    await QRBotStates.waiting_pdf.set()

async def process_pdf(message: types.Message, state: FSMContext):
    data = await state.get_data()
    excel_path = data.get('excel_path')
    if not message.document or not message.document.file_name.lower().endswith('.pdf'):
        await message.answer('–≠—Ç–æ –Ω–µ PDF-—Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .pdf.')
        return
    file = await message.document.get_file()
    pdf_path = f'tmp_{message.from_user.id}.pdf'
    await file.download(destination_file=pdf_path)

    output_path = f'result_{message.from_user.id}.pdf'
    df = pd.read_excel(excel_path)
    external_pdf = PdfReader(pdf_path)
    external_pages = len(external_pdf.pages)

    merger = PdfMerger()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
    for f in os.listdir():
        if f.startswith('barcode_') and f.endswith('.pdf'):
            os.remove(f)
    if os.path.exists('barcode.png'):
        os.remove('barcode.png')

    ext_index = 0
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–∞—á–∏–Ω–∞—è —Å —Ç—Ä–µ—Ç—å–µ–π (df.iloc[2:])
    for _, row in df.iloc[2:].iterrows():
        name = str(row.get('Unnamed: 2', '')).strip()
        article = str(row.get('Unnamed: 4', '')).strip()
        barcode_num = str(row.get('Unnamed: 6', '')).split(',')[0].strip()

        if not barcode_num.isdigit() or barcode_num == '0':
            continue

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –≤ PNG
        ean = EuropeanArticleNumber13(barcode_num, writer=ImageWriter())
        ean.save('barcode')  # —Å–æ–∑–¥–∞—Å—Ç barcode.png

        # –°–æ–∑–¥–∞–Ω–∏–µ PDF-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
        fname = f'barcode_{ext_index}.pdf'
        c = canvas.Canvas(fname, pagesize=(58*mm, 40*mm))
        c.setFont('Arial', 7)
        x, y = 2*mm, 35*mm
        for line in name.split('\n'):
            c.drawString(x, y, line)
            y -= 3.5*mm
        c.drawString(x, y, 'Miss Beauty - –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É)')
        y -= 25*mm
        c.drawImage('barcode.png', 0, y, width=60*mm, height=22*mm)
        y -= 25*mm
        c.drawString(x, y, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–∫—Ä—ã–≤–∞–π—Ç–µ —É–ø–∞–∫–æ–≤–∫—É')
        y -= 3*mm
        c.drawString(x, y, '–±–µ—Ä–µ–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–æ–∫ –≤–∞—Å –ø–æ—Ä–∞–¥–æ–≤–∞–ª!')
        c.save()

        # –£–¥–∞–ª—è–µ–º PNG, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å
        if os.path.exists('barcode.png'):
            os.remove('barcode.png')

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–æ–ø–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
        merger.append(fname)
        merger.append(fname)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ PDF
        if ext_index < external_pages:
            # pages=(start, end) –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã start..end-1, –ø–æ—ç—Ç–æ–º—É —Ç—É—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞
            merger.append(pdf_path, pages=(ext_index, ext_index+1))
            ext_index += 1

    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if ext_index == 0:
        await message.answer('–í Excel –Ω–µ—Ç —Å—Ç—Ä–æ–∫ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        await state.finish()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π PDF
    with open(output_path, 'wb') as f_out:
        merger.write(f_out)
    merger.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—á–∏—Ç–∞–µ–º –∫–∞–∫ InputFile, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å—Ä–∞–∑—É)
    doc = InputFile(output_path, filename='result.pdf')
    await message.answer_document(doc)

    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for tmp in [excel_path, pdf_path, output_path]:
        if os.path.exists(tmp):
            os.remove(tmp)
    for f in os.listdir():
        if f.startswith('barcode_') and f.endswith('.pdf'):
            os.remove(f)

    await message.answer('–ì–æ—Ç–æ–≤–æ! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.', reply_markup=main_menu)
    await state.finish()

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_qrbot, Text(equals='üìä –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ 2'))
    dp.register_message_handler(process_excel, content_types=['document'], state=QRBotStates.waiting_excel)
    dp.register_message_handler(process_pdf, content_types=['document'], state=QRBotStates.waiting_pdf)
